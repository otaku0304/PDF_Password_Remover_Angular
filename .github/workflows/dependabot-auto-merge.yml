name: Auto-merge Dependabot PRs

permissions:
  contents: write
  pull-requests: write

on:
  pull_request:
    types:
      - opened
      - synchronize

jobs:
  auto-merge:
    if: github.event.pull_request.user.login == 'dependabot[bot]'  # Run only for Dependabot PRs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get pull request details
        id: get_pr_details
        run: |
          pr_url="https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}"

          # Extract title from PR details
          pr_title=$(curl -s "$pr_url" | jq -r '.title')
          echo "Pull request title: $pr_title"
          echo "PR_TITLE=$pr_title" >> $GITHUB_ENV

      - name: Extract package details from PR title
        id: extract_details
        run: |
          PR_TITLE="${{ env.PR_TITLE }}"

          package_name=$(echo "$PR_TITLE" | awk '{print $3}')
          package_manager=$(echo "$PR_TITLE" | grep -oP '(?<=package-manager: )\S+' || echo "npm_and_yarn")
          previous_version=$(echo "$PR_TITLE" | grep -oP '\d+\.\d+\.\d+' | head -n 1)
          new_version=$(echo "$PR_TITLE" | grep -oP '\d+\.\d+\.\d+' | tail -n 1)

          echo "Extracted details:"
          echo "Package Name: $package_name"
          echo "Package Manager: $package_manager"
          echo "Previous Version: $previous_version"
          echo "New Version: $new_version"

          echo "PACKAGE_NAME=$package_name" >> $GITHUB_ENV
          echo "PACKAGE_MANAGER=$package_manager" >> $GITHUB_ENV
          echo "PREVIOUS_VERSION=$previous_version" >> $GITHUB_ENV
          echo "NEW_VERSION=$new_version" >> $GITHUB_ENV

      - name: Generate compatibility score URL and request the score
        id: request_compatibility_score
        run: |
          compatibility_url="https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=${{ env.PACKAGE_NAME }}&package-manager=${{ env.PACKAGE_MANAGER }}&previous-version=${{ env.PREVIOUS_VERSION }}&new-version=${{ env.NEW_VERSION }}"
            
          echo "Generated URL: $compatibility_url"
        
          # Fetch the SVG response
          svg_response=$(curl -s "$compatibility_url")
            
          # Extract compatibility score from SVG response
          compatibility_score=$(echo "$svg_response" | grep -oP '(?<=<title>compatibility: )\d+(?=%</title>)')
        
          if [[ -z "$compatibility_score" ]]; then
            echo "No compatibility score found. Skipping auto-merge."
            echo "COMPATIBILITY_SCORE=none" >> $GITHUB_ENV
            exit 0  # Safe, early exit
          fi
        
          echo "Extracted Compatibility Score: $compatibility_score"
          echo "COMPATIBILITY_SCORE=$compatibility_score" >> $GITHUB_ENV     

      - name: Check compatibility score and auto-merge
        run: |
          if [[ "$COMPATIBILITY_SCORE" == "100" ]]; then
            echo "Compatibility score is 100%, auto-merging..."
            gh pr merge ${{ github.event.pull_request.number }} --auto --squash --delete-branch
          else
            echo "Compatibility score is not 100%, skipping auto-merge."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
